<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
<!-- ========================= 김지우 ========================================================================================================================================================= -->
	<entry key="updateUserLevel"> <!-- 회원조회 페이지에서 회원등급을 수정하는 쿼리 (Update) -->
		UPDATE 
			   	MEMBER
		SET MEM_LEVEL = ?
		WHERE MEM_ID = ?
	</entry>
	
	<entry key="selectMemberList"> <!-- 전체 회원조회 쿼리 (Select) -->
		SELECT M.MEM_NO AS "MEM_NO"
		     , MEM_ID
		     , MEM_LEVEL
		     , COUNT(REVIEW_CONTENT) "REVIEW_CONTENT_COUNT"
		     , AVG(LIKE_POINT) "AVG_LIKE_POINT"
		     , PREF_GENRE
		     , DORMANT_STATUS
		FROM MEMBER M
		JOIN REVIEW R ON M.MEM_NO = R.MV_REVIEW_NO
		GROUP BY M.MEM_NO, MEM_ID, MEM_LEVEL, PREF_GENRE, DORMANT_STATUS
		ORDER BY MEM_NO DESC, DORMANT_STATUS ASC
	</entry>
	
	<entry key="selectUserListCount"> <!-- 페이징용 쿼리 -->
		SELECT COUNT(*) COUNT
		FROM MEMBER
	</entry>
	
	<entry key="selectUserList">
		SELECT *
			FROM(
			    SELECT ROWNUM RNUM, A.*
			    FROM (
			            SELECT
			            	M.MEM_NO
			              , MEM_ID 
			              , MEM_LEVEL
			              , COUNT(REVIEW_CONTENT) "REVIEW_CONTENT_COUNT"
			              , AVG(LIKE_POINT) "AVG_LIKE_POINT"
			              , PREF_GENRE
			              , DORMANT_STATUS
			            FROM MEMBER M
			            JOIN REVIEW R ON M.MEM_NO = R.MV_REVIEW_NO
			            GROUP BY M.MEM_NO, MEM_ID, MEM_LEVEL, PREF_GENRE, DORMANT_STATUS
			            ORDER BY M.MEM_NO DESC, DORMANT_STATUS ASC
			    ) A
		)
		WHERE RNUM BETWEEN ? AND ?
	</entry>
	
	<!-- <entry key="searchUserList"> 회원 아이디 검색용 쿼리 
		SELECT
            M.MEM_NO
          , MEM_ID
          , MEM_LEVEL
          , COUNT(REVIEW_CONTENT) "REVIEW_CONTENT_COUNT"
          , AVG(LIKE_POINT) "AVG_LIKE_POINT"
          , PREF_GENRE
          , DORMANT_STATUS
        FROM MEMBER M
        JOIN REVIEW R ON M.MEM_NO = R.MV_REVIEW_NO
        WHERE MEM_ID LIKE '%' || ? || '%'
        GROUP BY M.MEM_NO, MEM_ID, MEM_LEVEL, PREF_GENRE, DORMANT_STATUS
        ORDER BY M.MEM_NO DESC, DORMANT_STATUS ASC
	</entry> -->
	
	<entry key="selectHumanFilterUser"> <!-- 휴면회원 조회용 쿼리 -->
		SELECT M.MEM_NO AS "MEM_NO"
		     , MEM_ID
		     , MEM_LEVEL
		     , COUNT(REVIEW_CONTENT) "REVIEW_CONTENT_COUNT"
		     , AVG(LIKE_POINT) "AVG_LIKE_POINT"
		     , PREF_GENRE
		     , DORMANT_STATUS
		FROM MEMBER M 
		JOIN REVIEW R ON M.MEM_NO = R.MV_REVIEW_NO
		WHERE DORMANT_STATUS='Y'
        GROUP BY M.MEM_NO, MEM_ID, MEM_LEVEL, PREF_GENRE, DORMANT_STATUS
		ORDER BY MEM_NO DESC
	</entry>
	
	<entry key="selectLevelFilterUser"> <!-- 회원등급(level) 조회용 쿼리 -->
		SELECT M.MEM_NO AS "MEM_NO"
		     , MEM_ID
		     , MEM_LEVEL
		     , COUNT(REVIEW_CONTENT) "REVIEW_CONTENT_COUNT"
		     , AVG(LIKE_POINT) "AVG_LIKE_POINT"
		     , PREF_GENRE
		     , DORMANT_STATUS
		FROM MEMBER M 
		JOIN REVIEW R ON M.MEM_NO = R.MV_REVIEW_NO
		WHERE MEM_LEVEL=?
        GROUP BY M.MEM_NO, MEM_ID, MEM_LEVEL, PREF_GENRE, DORMANT_STATUS
		ORDER BY MEM_NO DESC
	</entry>
	
	<!-- 회원 작성 게시글 페이징 용도 -->
	<entry key="selectBoardListCount">
		SELECT COUNT(*) COUNT
		FROM BOARD B
        JOIN MEMBER M USING (MEM_NO)
        WHERE M.MEM_ID = ?
	</entry>
	
	<!-- 회원 작성 게시글 페이징, 조회 용도 -->
	<entry key="selectBoardList">
		SELECT *
			FROM (
			    SELECT ROWNUM RNUM, A.*
			    FROM (
			        SELECT
			            B.B_NO AS B_NO,
			            B.B_TITLE AS B_TITLE,
			            B.B_CONTENT AS B_CONTENT,
			            M.NICKNAME AS NICKNAME,
			            M.SIGNIN_DATE AS SIGNIN_DATE,
			            B.B_READ_COUNT AS B_READ_COUNT,
			            (SELECT COUNT(*) FROM REPLY WHERE BOARD_NO = B.B_NO) AS REPLYCOUNT
			        FROM BOARD B 
			        JOIN MEMBER M USING (MEM_NO)
			        WHERE M.MEM_ID = ?
			        ORDER BY B.B_NO DESC
			    ) A
			)
			WHERE RNUM BETWEEN ? AND ?
	</entry>
	
	<!-- 회원 작성 게시글 개수 세고 닉네임, 레벨 조회하는 용도 -->
	<entry key="selectUserBoardCount">
		SELECT
			MEM_NO
		  , MEM_ID 
		  ,	MEM_IMGPATH 
		  , MEM_COLOR
          , NICKNAME
          , MEM_LEVEL
          , (SELECT COUNT(*) FROM BOARD JOIN MEMBER USING (MEM_NO) WHERE MEM_ID = ?) BOARDCOUNT
          FROM MEMBER
          WHERE MEM_ID = ?
	</entry>
	
	<!-- 회원이 작성한 댓글의 글 조회, 페이징에 쓸 용도 -->
	<entry key="selectReplyList">
		SELECT *
			FROM (
			    SELECT ROWNUM RNUM, A.*
			    FROM (
			        SELECT
                        R.REPLY_NO AS REPLY_NO,
			            B.B_NO AS B_NO,
			            B.B_TITLE AS B_TITLE,
			            M.NICKNAME AS NICKNAME,
			            M.SIGNIN_DATE AS SIGNIN_DATE,
			            B.B_READ_COUNT AS B_READ_COUNT,
			            (SELECT COUNT(*) FROM REPLY WHERE BOARD_NO = B.B_NO) AS REPLYCOUNT
			        FROM BOARD B 
                    JOIN REPLY R ON (R.BOARD_NO = B.B_NO)
                    JOIN MEMBER M ON (B.MEM_NO = M.MEM_NO)
			        WHERE R.MEM_NO = ?
			        ORDER BY B.B_NO DESC
			    ) A
			)
			WHERE RNUM BETWEEN ? AND ?
	</entry>
	
	<!-- 회원이 작성한 댓글의 글 개수를 count -->
	<entry key="selectReplyListCount">
		SELECT COUNT(*) COUNT
		FROM REPLY R
        WHERE MEM_NO = ?
	</entry>
	
	<!-- 회원이 작성한 리뷰 조회, 페이징에 쓸 용도 -->
	<entry key="selectReviewList">
		 SELECT *
			FROM (
			    SELECT ROWNUM RNUM, A.*
			    FROM (
			        SELECT 
                        MV_REVIEW_NO
                      , MV_NAME
                      , REVIEW_CONTENT
                      , LIKE_POINT
                      , NICKNAME
                      , REVIEW_DATE
                      FROM REVIEW
                      JOIN MOVIE USING (MV_NO)
                      JOIN MEMBER USING (MEM_NO)
                      WHERE MEM_NO = ?
                      ORDER BY MV_REVIEW_NO DESC
			    ) A
			)
			WHERE RNUM BETWEEN ? AND ?
	</entry>
	
	<!-- 회원이 작성한 리뷰 조회, 페이징에 쓸 용도 -->
	<entry key="selectReviewListCount">
		SELECT COUNT(*) COUNT
		FROM REVIEW
        WHERE MEM_NO = ?
	</entry>
	
	<!-- 회원조회의 검색 용도 -->
	<entry key="searchUserListCount">
		SELECT COUNT(*) COUNT
		FROM MEMBER
        WHERE MEM_ID LIKE '%' || ? || '%'
	</entry>
	
	<!-- 회원조회의 검색 용도 -->
	<entry key="searchUserList">
		SELECT *
			FROM (
			    SELECT ROWNUM RNUM, A.*
			    FROM (
			         SELECT
			            	M.MEM_NO
			              , MEM_ID 
			              , MEM_LEVEL
			              , COUNT(REVIEW_CONTENT) "REVIEW_CONTENT_COUNT"
			              , AVG(LIKE_POINT) "AVG_LIKE_POINT"
			              , PREF_GENRE
			              , DORMANT_STATUS
                       FROM MEMBER M
			            JOIN REVIEW R ON M.MEM_NO = R.MV_REVIEW_NO
                        WHERE M.MEM_ID LIKE '%' || ? || '%'
			            GROUP BY M.MEM_NO, MEM_ID, MEM_LEVEL, PREF_GENRE, DORMANT_STATUS
			            ORDER BY M.MEM_NO DESC, DORMANT_STATUS ASC
			    ) A
			)
			WHERE RNUM BETWEEN ? AND ?
	</entry>
	
<!-- ================================ 절취선 끝쪽 =============================================================================================================== -->	
	
	<!-- 로그인용 쿼리 -->
	<entry key="loginMember">
		SELECT
			   MEM_NO
			 , MEM_ID
			 , MEM_PWD
			 , MEM_NAME
			 , MEM_BD
			 , MEM_GENDER
			 , MEM_EMAIL
			 , MEM_PHONE
			 , PREF_GENRE
		     , NICKNAME
			 , MEM_STATUS
		     , SIGNIN_DATE
			 , MEM_LEVEL
			 , MEM_COLOR
		     , MEM_IMGPATH
		     , MEM_FILE
		     , DORMANT_STATUS 
		  FROM MEMBER
		 WHERE MEM_ID = ?
		   AND MEM_PWD = ?
		   AND MEM_STATUS IN 'Y'
	</entry>
	
	<!-- 회원가입용 쿼리 -->
	<entry key="insertMember">
		INSERT 
				INTO MEMBER
				(
				MEM_NO
				, MEM_ID
				, MEM_PWD
				, MEM_EMAIL
				, NICKNAME
				, MEM_NAME
				, MEM_BD
				, MEM_GENDER
				, MEM_PHONE
				, PREF_GENRE
				)
				VALUES
				(
				SEQ_MEMBER_NO.NEXTVAL
				, ?
				, ?
				, ?
				, ?
				, ?
				, ?
				, ?
				, ?
				, ?
				)
	</entry>
	
	<!-- 회원정보페이지 쿼리 -->
	<entry key="selectMember">
		SELECT
		      MEM_NO
		    , MEM_ID
		    , MEM_NAME
		    , NICKNAME
		    , MEM_PWD
		    , MEM_PHONE
		    , MEM_EMAIL
		    , PREF_GENRE
		    , SIGNIN_DATE
		    , MEM_STATUS
		 FROM MEMBER
		WHERE MEM_ID = ?
	</entry>
	
	<!-- 아이디중복체크 -->
	<entry key="idCheck">
		SELECT
			   COUNT(*) COUNT
		  FROM MEMBER
		 WHERE MEM_ID = ?
	</entry>
	
	<!-- 닉네임중복체크 -->
	<entry key="nicknameCheck">
		SELECT
			   COUNT(*) COUNT
		  FROM MEMBER
		 WHERE NICKNAME = ?
		 AND MEM_STATUS = 'Y'
	</entry>
	
	<!-- 회원탈퇴 -->
	<entry key="deleteMember">
		UPDATE
			   MEMBER
		   SET MEM_STATUS = 'N'
		 WHERE MEM_ID = ?
		   AND MEM_PWD = ?
	</entry>
	
	<entry key="deleteMemberInsert">
		INSERT 
				INTO CANCELED_MEM
				( 
				  MEM_NO
				, ADMIN_NO
				, CANCEL_DATE
				)
		VALUES
				(
				?
				, NULL
				, SYSDATE
				)
	</entry>
	
	<!-- 회원정보 변경 -->
	<entry key="updateMember">
		UPDATE
				MEMBER
		   SET MEM_NAME = ?
		   	 , NICKNAME = ?
		   	 , MEM_PWD = ?
		   	 , MEM_PHONE = ?
		   	 , MEM_EMAIL = ?
		   	 , PREF_GENRE = ?
		 WHERE MEM_ID = ?   	 
	</entry>		
	
	<!-- 비밀번호 변경 -->
	<entry key="updatePwdMember">
		UPDATE
		       MEMBER
		   SET MEM_PWD = ?
		 WHERE MEM_ID = ?
		   AND MEM_PWD = ?
	</entry>
	<!-- 작성글 조회 -->
	<entry key="selectMyPostListCount">
		SELECT COUNT(*) COUNT
	  	  FROM BOARD
     	 WHERE B_B_STATUS = 'N'
       	   AND B_D_STATUS = 'N'
           AND MEM_NO = ?
	</entry>
	
	<entry key="selectMyPostList">
		SELECT *
		  FROM(
		        SELECT ROWNUM RNUM, A.*
		          FROM (
		               SELECT
		                       B_NO
		                     , B_CATEGORY
		                     , B_TITLE
		                     , TO_CHAR(B_REGIST_DATE, 'YY/MM/DD') REGIST_DATE
		                     , B_READ_COUNT
		                  FROM BOARD B , MEMBER M
                         WHERE B.MEM_NO = M.MEM_NO
                           AND B.MEM_NO = ?
                           AND B_B_STATUS = 'N'
                           AND B_D_STATUS = 'N'
                      ORDER BY B_NO DESC
		                ) A
		        )
		 WHERE RNUM BETWEEN ? AND ?
	</entry>
	
	<!-- 작성댓글 조회 -->
	<entry key="selectMyCommentListCount">
		SELECT COUNT(*) COUNT
	  	  FROM REPLY
     	 WHERE REPLY_B_STATUS = 'N'
       	   AND REPLY_D_STATUS = 'N'
           AND MEM_NO = ?
	</entry>
	
	<entry key="selectMyCommentList">    
		SELECT *
		  FROM(
		        SELECT ROWNUM RNUM, A.*
		          FROM (
		               SELECT
		               		   BOARD_NO	
		                     , REPLY_NO
		                     , REPLY_CONTENT
		                     , TO_CHAR(ENROLL_DATE, 'YY/MM/DD') ENROLL_DATE
		                  FROM REPLY R , MEMBER M
                         WHERE R.MEM_NO = M.MEM_NO
                           AND R.MEM_NO = ?
                           AND REPLY_B_STATUS = 'N'
                           AND REPLY_D_STATUS = 'N'
                      ORDER BY REPLY_NO DESC
		                ) A
		        )
		 WHERE RNUM BETWEEN ? AND ?
	</entry>
	
	<!-- 좋아요 누른 영화 목록 조회 -->
	<entry key="selectMovieLikeListCount">
		SELECT COUNT(*) COUNT
		  FROM MOVIE_LIKE
		 WHERE MEM_NO = ?
	</entry>
	
	<entry key="selectMovieList">      
		SELECT
			   M.MV_NO
			 , M.MV_NAME
			 , M.MV_OPENDATE
			 , (SELECT ROUND(AVG(LIKE_POINT), 1) FROM REVIEW R WHERE R.MV_NO = M.MV_NO) AS "STAR_RATING_AVG"
			 , M.MV_POSTER
		  FROM MOVIE M, MOVIE_LIKE MK
		 WHERE M.MV_NO=MK.MV_NO
		   AND MK.MEM_NO=?
		 ORDER BY MK.LIKE_DATE DESC


	</entry>
	
	<!-- 리뷰 남긴 영화 목록 -->
	<entry key="selectMovieLikeListCount">
		SELECT COUNT(*) COUNT
		  FROM REVIEW
		 WHERE MEM_NO = ?
	</entry>
	
	<entry key="selectMovieStarRatingList">      
		SELECT 
		      M.MV_NO
		    , M.MV_NAME
		    , M.MV_OPENDATE
		    , M.MV_POSTER
		    , (SELECT ROUND(AVG(LIKE_POINT), 1) FROM REVIEW R WHERE R.MV_NO = M.MV_NO) "STAR_RATING_AVG"
		    , R.LIKE_POINT "STAR_RATING"
		 FROM MOVIE M, REVIEW R
		WHERE M.MV_NO=R.MV_NO
		  AND R.MEM_NO=?
		ORDER BY R.REVIEW_DATE DESC
	</entry>
	
	<!-- 선호장르 -->
	<entry key="selectPrefGenre">
		SELECT CATEGORY_NAME
		  FROM CATEGORY
	</entry>
	
</properties>