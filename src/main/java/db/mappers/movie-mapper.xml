<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
	<!-- 페이징 하기위해 리스트 갯수 조회 구문 [용훈]  --> 
	<entry key="selectListCount">
		SELECT COUNT(*) "COUNT"
		FROM MOVIE
		WHERE MV_STATUS = 'Y'
	</entry>
	
	<!--  탐색페이지 필터 활용 구문 [용훈] -->
	<entry key="selectExploList">
		SELECT  M.MV_NO
            , MV_POSTER
            , MV_NAME
            , (SELECT ROUND(AVG(LIKE_POINT), 1) FROM REVIEW WHERE MV_NO = M.MV_NO) "LIKE_POINT"
            , MV_OPENDATE
            , FILE_PATH || CHANGE_NAME "FILEPATH"
            , (SELECT COUNT(*) FROM MOVIE_LIKE WHERE  MV_NO = M.MV_NO) "LIKECOUNT"
            , (SELECT COUNT(*) FROM REVIEW WHERE MV_REVIEW_NO = M.MV_NO) "REVIEWS"
		FROM MOVIE M
		JOIN MOVIE_CATEGORY C ON (M.MV_NO = C.MV_NO)
		JOIN ATTACHMENT A ON (REF_NO = M.MV_NO)
		WHERE MV_STATUS = 'Y'  
	</entry>
	
	<!-- 영화, 인물 검색 시 사용할 구문 [기웅] -->
	<!-- 영화 제목, 개봉연도, 평균별점 조회 -->
	<entry key="selectMovieStarRatingAvg">
		SELECT M.MV_NO AS "MV_NO", MV_NAME, MV_OPENDATE, ROUND(AVG(LIKE_POINT), 1) AS "AVG_LIKE_POINT"
		FROM MOVIE M
		LEFT JOIN REVIEW R
		ON R.MV_NO = M.MV_NO
		WHERE MV_NAME LIKE ?
		AND MV_STATUS = 'Y'
		GROUP BY(M.MV_NO, MV_NAME, MV_OPENDATE)
		ORDER BY MV_NO
	</entry>
	<!-- 영화 포스터 경로 -->
	<entry key="selectMoviePosterPath">
		SELECT MV_POSTER
		FROM MOVIE
		WHERE MV_NAME LIKE ?
		AND MV_STATUS = 'Y'
		ORDER BY MV_NO
	</entry>
	
	<!-- 영화 상세보기를 위한 쿼리 [기웅] -->
	<!-- 영화 상세정보 조회 -->
	<entry key="selectMovieInfo">
		SELECT 
    	M.MV_NO, 
    	MV_NAME, 
    	MV_OPENDATE, 
    	MV_RTIME,
    	MV_STORY,
    	(SELECT ROUND(AVG(LIKE_POINT), 1) FROM REVIEW R WHERE R.MV_NO = M.MV_NO) AS "평균별점",
    	(SELECT COUNT(*) FROM REVIEW R WHERE R.MV_NO = M.MV_NO) AS "별점 매긴 사람 수"
		FROM MOVIE M
		WHERE MV_NO = ?;
	</entry>
</properties>