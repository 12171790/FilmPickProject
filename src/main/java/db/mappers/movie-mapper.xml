<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
	<!-- 페이징 하기위해 리스트 갯수 조회 구문 [용훈]  --> 
	<entry key="selectListCount">
		SELECT COUNT(*) "COUNT"
		FROM MOVIE M
		LEFT JOIN MOVIE_CATEGORY C ON (M.MV_NO = C.MV_NO)
		WHERE MV_STATUS = 'Y'
	</entry>
	
	<!--  탐색페이지 필터 활용 구문 [용훈] -->
	<entry key="selectExploList">
		SELECT DISTINCT M.MV_NO
            , MV_POSTER
            , MV_NAME
            , (SELECT ROUND(AVG(LIKE_POINT), 1) FROM REVIEW WHERE MV_NO = M.MV_NO) "LIKE_POINT"
            , MV_OPENDATE
            , (SELECT COUNT(*) FROM MOVIE_LIKE WHERE MV_NO = M.MV_NO) "LIKECOUNT"
            , (SELECT COUNT(*) FROM REVIEW WHERE MV_NO = M.MV_NO) "REVIEWS"
		FROM MOVIE M
		LEFT JOIN MOVIE_CATEGORY C ON (M.MV_NO = C.MV_NO)
		WHERE MV_STATUS = 'Y'  
	</entry>
	
	<!-- 영화, 인물 검색 시 사용할 구문 [기웅] -->
	<!-- 영화 제목, 개봉연도, 평균별점 조회 -->
	<entry key="selectMovieStarRatingAvg">
		SELECT M.MV_NO AS "MV_NO", MV_NAME, MV_OPENDATE, ROUND(AVG(LIKE_POINT), 1) AS "AVG_LIKE_POINT"
		FROM MOVIE M
		LEFT JOIN REVIEW R
		ON R.MV_NO = M.MV_NO
		WHERE MV_NAME LIKE ?
		AND MV_STATUS = 'Y'
		GROUP BY(M.MV_NO, MV_NAME, MV_OPENDATE)
		ORDER BY MV_NO
	</entry>
	<!-- 영화 포스터 경로 -->
	<entry key="selectMoviePosterPath">
		SELECT MV_POSTER
		FROM MOVIE
		WHERE MV_NAME LIKE ?
		AND MV_STATUS = 'Y'
		ORDER BY MV_NO
	</entry>
	
	<!-- 영화 상세보기를 위한 쿼리 [기웅] -->
	<!-- 영화 상세정보 조회 -->
	<entry key="selectMovieInfo">
		SELECT 
    	M.MV_NO AS "MV_NO", 
    	MV_NAME, 
    	MV_OPENDATE, 
    	MV_RTIME,
    	MV_STORY,
        MV_POSTER,
        MV_PREVIEW,
    	(SELECT ROUND(AVG(LIKE_POINT), 1) FROM REVIEW R WHERE R.MV_NO = M.MV_NO) AS "AVG_STAR_RATING",
    	(SELECT COUNT(*) FROM REVIEW R WHERE R.MV_NO = M.MV_NO) AS "NUMBER_OF_STAR_RATING"
		FROM MOVIE M
		WHERE MV_NO = ?
	</entry>
	<!-- 영화 상세보기에서 영화 추가 파일을 불러오는 쿼리 -->
	<entry key="selectAddiMovie">
	SELECT FILE_NO, FILE_PATH || CHANGE_NAME AS "FILEPATH"
	FROM ATTACHMENT
	JOIN MOVIE
	ON REF_NO = MV_NO
	WHERE MV_NO = ?
	AND FILE_LEVEL = 2
	AND FILE_STATUS = 'Y'
	AND REF_TYPE = 1
	</entry>
	<!-- 영화 상세보기에서 리뷰 정보를 불러오는 쿼리 -->
	<entry key="selectReviewInfo">
	SELECT 
    MV_REVIEW_NO
    , REVIEW_CONTENT
    , REVIEW_DATE
    , LIKE_POINT
    , NICKNAME
    , MEM_LEVEL
    , (SELECT COUNT(*) FROM APPROVAL A WHERE R.MV_REVIEW_NO = A.MV_REVIEW_NO AND APPROVAL_TYPE = 1) AS "COUNT_AGREE"
    , (SELECT COUNT(*) FROM APPROVAL A WHERE R.MV_REVIEW_NO = A.MV_REVIEW_NO AND APPROVAL_TYPE = 2) AS "COUNT_DISAGREE"
    , MEM_IMGPATH
    , MEM_COLOR
    , R.MEM_NO AS "MEM_NO"
	FROM REVIEW R
	JOIN MEMBER M
	ON M.MEM_NO = R.MEM_NO
	WHERE R.MV_NO = ?
	</entry>
	<!-- 영화 상세보기에서 관련 영화 정보를 가져오는 쿼리 -->
	<entry key="selectRelMovieList">
		<![CDATA[SELECT 
		    MV_NO
		    , MV_NAME
		    , MV_OPENDATE
		    , MV_POSTER
		    , AVG_STAR_RATING
		FROM (
		    SELECT 
		        M.MV_NO AS "MV_NO"
		        , MV_NAME
		        , MV_OPENDATE
		        , MV_POSTER
		        , (SELECT ROUND(AVG(LIKE_POINT), 1) FROM REVIEW R WHERE R.MV_NO = M.MV_NO) AS "AVG_STAR_RATING"
		        , ROWNUM RNUM
		    FROM MOVIE M
		    JOIN MOVIE_CATEGORY MC
		    ON MC.MV_NO = M.MV_NO
		    WHERE MC.CATEGORY_NO IN (
		        SELECT CATEGORY_NO
		        FROM MOVIE M
		        JOIN MOVIE_CATEGORY MC
		        ON MC.MV_NO = M.MV_NO
		        WHERE M.MV_NO = ?
		    )
		    AND M.MV_NO <> ?
		)
		WHERE RNUM < 11]]>
	</entry>
	<!-- 영화 좋아요 표시 처리하는 쿼리 [기웅] -->
	<entry key="insertMovieLike">
	INSERT INTO MOVIE_LIKE
	VALUES (
	    SEQ_MOVIE_LIKE_NO.NEXTVAL
	    , SYSDATE
	    , ?    
	    , ?
	)
	</entry>
	
	<entry key="deleteMovieLike">
	DELETE
	FROM MOVIE_LIKE
	WHERE MV_NO = ?
	AND   MEM_NO = ?
	</entry>
	
	<!-- 첫페이지 영화 리스트 조회 [용훈] -->
	<entry key="firstselect">
	<![CDATA[
		SELECT F.*
		FROM (
		    SELECT MV_NO, MV_POSTER
		    FROM MOVIE
		    WHERE MV_STATUS = 'Y'
		    ORDER BY MV_OPENDATE DESC
		) F
		WHERE ROWNUM <= 5
	]]>
	</entry>
	
	<!-- 메인페이지 영화예고편 조회 [용훈] -->
	<entry key="selectMainListv">
	<![CDATA[
		SELECT V.*
		FROM (
		    SELECT MV_NO, MV_NAME, MV_OPENDATE, MV_STORY, MV_PREVIEW
		    FROM MOVIE
		    WHERE MV_STATUS = 'Y'
		    ORDER BY MV_OPENDATE DESC
		) V
		WHERE ROWNUM <= 5
	]]>
	</entry>
	
	<!-- 메인페이지 영화포스터 조회 [용훈] -->
	<entry key="selectMainListp">
	    SELECT DISTINCT M.MV_NO
            , MV_POSTER
            , MV_NAME
            , (SELECT ROUND(AVG(LIKE_POINT), 1) FROM REVIEW WHERE MV_NO = M.MV_NO) "LIKE_POINT"
            , MV_OPENDATE
            , (SELECT COUNT(*) FROM MOVIE_LIKE WHERE MV_NO = M.MV_NO) "LIKECOUNT"
            , (SELECT COUNT(*) FROM REVIEW WHERE MV_NO = M.MV_NO) "REVIEWS"
		FROM MOVIE M
		LEFT JOIN MOVIE_CATEGORY C ON (M.MV_NO = C.MV_NO)
		WHERE MV_STATUS = 'Y'
	</entry>
	
	<!-- 리뷰 등록하는 쿼리 [기웅] -->
	<entry key="insertReview">
	INSERT INTO REVIEW
	VALUES (
	    SEQ_REVIEW_NO.NEXTVAL
	    , ?
	    , SYSDATE
	    , ?
	    , ?
	    , ?
	)
	</entry>
	
	<!-- 다른 유저의 정보를 조회하는 쿼리 [기웅] -->
	<entry key="selectOtherUserInfo">
		SELECT 
             MEM_LEVEL
            , MEM_IMGPATH
            , MEM_COLOR
            , (SELECT COUNT(*) FROM REVIEW WHERE MEM_NO = M.MEM_NO) AS "COUNT_STAR_RATING"
            , (SELECT ROUND(AVG(LIKE_POINT), 1) FROM REVIEW WHERE MEM_NO = M.MEM_NO) AS "AVG_STAR_RATING"
		FROM MEMBER M
		WHERE M.MEM_NO = ?
	</entry>
	
	<!-- 다른 유저의 리뷰 내용을 조회하는 쿼리 -->
	<entry key="selectReviewOtherUser">
		 SELECT 
            MV_REVIEW_NO
            , REVIEW_CONTENT
            , REVIEW_DATE
            , LIKE_POINT
            , (SELECT COUNT(*) FROM APPROVAL A WHERE R.MV_REVIEW_NO = A.MV_REVIEW_NO AND APPROVAL_TYPE = 1) AS "AGREE_COUNT"
            , (SELECT COUNT(*) FROM APPROVAL A WHERE R.MV_REVIEW_NO = A.MV_REVIEW_NO AND APPROVAL_TYPE = 2) AS "DISAGREE_COUNT"
        FROM REVIEW R
        JOIN MEMBER M
        ON M.MEM_NO = R.MEM_NO
        WHERE M.MEM_NO = ?
	</entry>
</properties>